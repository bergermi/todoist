###
#  summary: Create a to-do item
#
#  parameters:
#    - in: body
#      description: The body of the to-do item to create.
#      schema:
#        $ref: '#/definitions/domain.TodoBody'
#  responses:
#    200:
#      description: Returns the created to-do item.
#      schema:
#        $ref: '#/definitions/domain.api.response.TodoResponse'
#    500:
#      description: If an internal error occured
###
POST          /todos               controllers.TodoController.createTodo

###
#  summary: Retrieve all to-do items
#
#  responses:
#    200:
#      description: Returns all to-do items.
#      schema:
#        $ref: '#/definitions/domain.api.response.TodosResponse'
#    500:
#      description: If an internal error occured
###
GET           /todos               controllers.TodoController.getTodos

###
#  summary: Retrieve a to-do item by id
#
#  responses:
#    200:
#      description: Returns a single to-do item for a given id.
#      schema:
#        $ref: '#/definitions/domain.api.response.TodoResponse'
#    500:
#      description: If an internal error occured
###
GET           /todos/:id           controllers.TodoController.getTodo(id: String)

###
#  summary: Update a to-do item
#
#  parameters:
#    - in: body
#      description: The body of the to-do item to update.
#      schema:
#        $ref: '#/definitions/domain.TodoBody'
#  responses:
#    200:
#      description: The to-do item was updated.
#    404:
#      description: The specified item does not exist.
#    500:
#      description: If an internal error occured
###
PUT           /todos/:id           controllers.TodoController.updateTodo(id: String)

###
#  summary: Delete a to-do item by id
#
#  responses:
#    200:
#      description: A to-do item was deleted.
#    404:
#      description: The specified item does not exist.
#    500:
#      description: If an internal error occured
###
DELETE        /todos/:id           controllers.TodoController.deleteTodo(id: String)

### NoDocs ###
GET           /docs                controllers.Assets.at(path:String="/public/lib/swagger", file:String ="index.html")

### NoDocs ###
GET           /docs/*file          controllers.Assets.at(path:String="/public/lib/swagger", file:String)

### NoDocs ###
GET           /assets/*file        controllers.Assets.versioned(path="/public", file: Asset)